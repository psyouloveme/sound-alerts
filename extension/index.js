var e={current:null};let n;var a;let u;var d;let l;var o;function t({user:a="",message:d=""}){if(0===a.length||0===d.length)return;if(null==e.current)throw Error("Cue command change failed: NodeCG handle is invalid.");const o=e.current,t=o.Replicant(n.soundCueConfig);if(void 0===t.value)return void o.log.error("Cue command change failed: Sound cue map is undefined.");const s=d.split(" ")[0],i=t.value.findIndex((e=>e.commandName===s));if(i<0)return;const r=t.value[i];if(r.enabled||o.log.debug(`Cue command ${s} is disabled, not playing.`),!r.allCuesAreValid)return void o.log.warn(`Cue command ${s} has invalid cues, not playing.`);if(null!=r.coolDownMs&&null!=r.lastUseTimestamp&&Date.now()-r.lastUseTimestamp<r.coolDownMs)return void o.log.warn(`Cue command ${s} is still on cooldown, not playing.`);if(null==r.mappedCues||0===r.mappedCues.length)return void o.log.warn(`Cue command ${s} has no mapped cues.`);let m=null,c=r.orderedMappingIndex??0;r.mappedCues.length<c&&(c=0);let C=null;switch(r.commandType){case l.single:m=r.mappedCues[0];break;case l.ordered:m=r.mappedCues[c],C=c+1;break;case l.random:m=r.mappedCues[Math.floor(Math.random()*r.mappedCues.length)];break;default:return void o.log.warn(`Cue command ${s} has an invalid type.`)}const p=o.Replicant(n.soundCueList);void 0!==t.value?0!==m.length&&null!=p.value.find((e=>e===m))?(o.sendMessage(u.playSoundCue,m),t.value[i]={...t.value[i],lastUseTimestamp:Date.now(),orderedMappingIndex:C,commandUsageCount:t.value[i].commandUsageCount+1}):o.log.warn(`Cue command ${s} did not map to a known cue. Mapped cue was ${m.length>0?m:'"null"'}.`):o.log.error("Cue command change failed: Sound cue list is undefined.")}let s;(a=n||(n={})).soundCueConfig="soundCueConfig",a.soundCuesEnabled="soundCuesEnabled",a.soundCueList="soundCueList",a.soundCueLog="soundCueLog",a.soundCueTypes="soundCueTypes",a.soundCueCommandIndex="soundCueCommandIndex",a.nodeCGServerSoundCues="soundCues",(d=u||(u={})).playedSoundCue="playedCue",d.playSoundCue="playSoundCue",d.upsertSoundCommand="upsertSoundCommand",d.deleteSoundCommand="deleteSoundCommand",d.twitchChatReceived="ChatReceived",(o=l||(l={})).single="single",o.random="random",o.ordered="ordered",(s||(s={})).change="change";var i=s;function r(a,u){if(null==e.current)throw Error("Cue command delete failed: NodeCG handle is invalid.");const d=e.current,l=d.Replicant(n.soundCueLog,{defaultValue:{}});d.log.info("played cue: %s",a),(null==a||a.length>0)&&(a in l.value?l.value[a]+=1:l.value[a]=1,d.log.info("cue %s is now at %s plays",a,l.value[a])),null==u||u.handled||u(null)}let m;(m||(m={})).twitchListener="twitch-listener",module.exports=function(a){a.log.debug("Soundalerts bundle started."),e.current=a,a.Replicant(n.soundCueCommandIndex,{defaultValue:0}),a.Replicant(n.soundCuesEnabled,{defaultValue:!1}),a.Replicant(n.soundCueLog,{defaultValue:{}}),a.Replicant(n.soundCueTypes,{defaultValue:[l.ordered,l.random,l.single]});const d=a.Replicant(n.soundCueConfig);d.value=function(){if(null==e.current)throw Error("Cue command mapping failed: NodeCG handle is invalid.");const a=e.current,u=[],d=a.readReplicant(n.nodeCGServerSoundCues),o=a.Replicant(n.soundCueCommandIndex);if(null!=d&&d.length>0)for(let e=0;e<d.length;e++){const n=d[e];u.push({id:++o.value,commandName:n.name.startsWith("!")?n.name:`!${n.name}`,enabled:!1,coolDownMs:null,lastUseTimestamp:null,allCuesAreValid:!0,mappedCues:[n.name],orderedMappingIndex:null,commandType:l.single,commandUsageCount:0})}return u}();const o=a.Replicant(n.soundCueList,{defaultValue:[]});a.Replicant(n.nodeCGServerSoundCues).on(i.change,(e=>{o.value=e.map((e=>e.name))})),o.on(i.change,(e=>{d.value.forEach((n=>{n.allCuesAreValid=n.mappedCues.every((n=>e.includes(n)))}))})),a.listenFor(u.playedSoundCue,r),a.listenFor(u.twitchChatReceived,m.twitchListener,t)};
//# sourceMappingURL=index.js.map
