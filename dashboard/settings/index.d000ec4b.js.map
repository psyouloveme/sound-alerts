{"mappings":"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","sources":["src/dashboard/settings/HtmlHelpers.ts","src/types/SoundAlertReplicants.d.ts","src/types/ReplicantEvents.d.ts","src/dashboard/settings/types.d.ts","src/dashboard/settings/index.ts"],"sourcesContent":["function buildDiv(id?: string, classes?: string[]) {\n    const div = document.createElement(\"div\") as HTMLDivElement;\n    if (classes && classes.length > 0){\n        div.classList.add(...classes);\n    }\n    if (id) {\n        div.id = id;\n    }\n    return div;\n}\n\nfunction buildHiddenInput(name: string, value: string) {\n    const input = document.createElement(\"input\") as HTMLInputElement;\n    input.type = \"hidden\";\n    input.name = name;\n    input.value = value;\n    return input;\n}\n\nfunction buildButton(name : string, text: string, classes?: string[]) {\n    const button = document.createElement(\"button\") as HTMLButtonElement;\n    if (classes && classes.length > 0){\n        button.classList.add(...classes);\n    }\n    button.name = name;\n    button.innerText = text;\n    return button;\n}\n\nfunction buildLabel(forName: string, text: string, classes?: string[]) {\n    const label = document.createElement(\"label\") as HTMLLabelElement;\n    if (classes && classes.length > 0){\n        label.classList.add(...classes);\n    }\n    label.htmlFor = forName;\n    label.innerText = text;\n    return label;\n}\n\nfunction buildSpan(text: string, classes?: string[]) {\n    const span = document.createElement(\"span\") as HTMLSpanElement;\n    if (classes && classes.length > 0){\n        span.classList.add(...classes);\n    }\n    span.innerText = text;\n    return span;\n}\n\nfunction buildTextInput(name: string, value: string, classes?: string[]) {\n    const input = document.createElement(\"input\") as HTMLInputElement;\n    if (classes && classes.length > 0){\n        input.classList.add(...classes);\n    }\n    input.type = \"text\";\n    input.name = name;\n    input.value = value;\n    return input;\n}\n\nfunction buildNumberInput(name: string, value: string, classes?: string[]) {\n    const input = document.createElement(\"input\") as HTMLInputElement;\n    if (classes && classes.length > 0){\n        input.classList.add(...classes);\n    }\n    input.type = \"number\";\n    input.name = name;\n    input.value = value;\n    return input;\n}\n\nexport type SelectInputDataElem = {\n    label: string;\n    value: string;\n    selected: boolean;\n}\n\nfunction buildSelect(classes : string[], name: string, options: SelectInputDataElem[]){\n    const select = document.createElement(\"select\") as HTMLSelectElement;\n    if (classes && classes.length > 0){\n       select.classList.add(...classes);\n    }\n    select.name = name;\n    options.forEach((opt) => {\n        const o = document.createElement(\"option\") as HTMLOptionElement;\n        o.value = opt.value;\n        o.innerText = opt.label;\n        o.selected = opt.selected;\n        select.add(o);\n    })\n    return select;\n}\n\nfunction buildForm(name: string | null, id: string | null, classes: CSSClasses[]) {\n    const form = document.createElement(\"form\") as HTMLFormElement;\n    if (name) {\n        form.name = name;\n    }\n    if (id) {\n        form.id = id;\n    }\n    if (classes && classes.length > 0) {\n        form.classList.add(...classes);\n    }\n    return form;\n}\n\nexport default {\n    buildButton,\n    buildLabel,\n    buildTextInput,\n    buildSelect,\n    buildHiddenInput,\n    buildSpan,\n    buildDiv,\n    buildNumberInput,\n    buildForm\n}","export enum SoundAlertReplicants {\n    soundCueConfig = \"soundCueConfig\",\n    soundCuesEnabled = \"soundCuesEnabled\",\n    soundCueList = \"soundCueList\",\n    soundCueLog = \"soundCueLog\",\n    soundCueTypes = \"soundCueTypes\",\n    soundCueCommandIndex = \"soundCueCommandIndex\",\n    nodeCGServerSoundCues = \"soundCues\" // this is for the extension to get the defined cues\n}\n\nexport type SoundCueNameList = string[];\n","enum ReplicantEvents {\n    change = \"change\"\n}\n\nexport default ReplicantEvents","\nexport enum CSSClasses {\n    commandFormRow = \"commandFormRow\",\n    btnRemove = \"btnRemove\",\n    btnAdd = \"btnAdd\",\n    formGroup = \"formGroup\",\n    middle = \"middle\",\n    btnToggleEnabled = \"btnToggleEnabled\",\n    enabled = \"enabled\",\n    readOnly = \"readOnly\",\n    hidden = \"hidden\",\n    cueSelectWrapper = \"cueSelectWrapper\"\n};\n\nexport enum ElementIDs {\n    cueConfigPanel = \"cueConfigPanel\"\n};\n\nexport type ConfigFormState = {\n    editingRows: number[],\n    submittingRows: number[],\n    rowErrors: Record<number, string>,\n    rendered: boolean,\n    commandTypeOptions: SoundCommandType[]\n}","import HtmlHelpers, { SelectInputDataElem } from \"./HtmlHelpers\";\nimport { SoundAlertReplicants, SoundCueNameList } from \"../../types/SoundAlertReplicants.d\";\nimport SoundCommandType from \"../../types/SoundCommandType.d\";\nimport ReplicantEvents from \"../../types/ReplicantEvents.d\";\nimport { ElementIDs, CSSClasses, ConfigFormState } from \"./types.d\";\n\nconst CommandConfig = nodecg.Replicant<SoundCommandList>(SoundAlertReplicants.soundCueConfig);\nconst CommandTypes = nodecg.Replicant<SoundCommandType[]>(SoundAlertReplicants.soundCueTypes);\nconst SoundCues = nodecg.Replicant<SoundCueNameList>(SoundAlertReplicants.soundCueList);\n\nfunction getCommandConfigById(id: number) {\n    if (!CommandConfig || !CommandConfig.value) {\n        throw Error(\"Unable to retrieve command config - config replicant not available.\");\n    }\n    const foundCommand = CommandConfig.value.find((c) => c.id === id);\n    if (!foundCommand) {\n        throw Error(`Unable to find command with ID ${id}.`);\n    }\n    return { ...foundCommand };\n}\n\nfunction getLiveCommandConfigById(id: number) {\n    if (!CommandConfig || !CommandConfig.value) {\n        throw Error(\"Unable to retrieve command config - config replicant not available.\");\n    }\n    const foundCommand = CommandConfig.value.find((c) => c.id === id);\n    if (!foundCommand) {\n        throw Error(`Unable to find command with ID ${id}.`);\n    }\n    return foundCommand;\n}\n\nfunction getTypeOptions(defaultValue?: string) {\n    if (!CommandTypes || !CommandTypes.value) {\n        throw Error(\"Unable to retrieve command types.\");\n    }\n    const typeOptions = CommandTypes.value.reduce((prev, curr) => {\n        prev.push({\n            label: curr,\n            value: curr,\n            selected: defaultValue === curr,\n        })\n        return prev;\n    }, [{\n        label: \"Select one\",\n        value: \"-1\",\n        selected: defaultValue ? false : true\n    }] as SelectInputDataElem[])\n    return typeOptions;\n}\n\nfunction getCueOptions(defaultValue?: string, soundCues?: SoundCueNameList) {\n    let cues;\n    if (soundCues) {\n        cues = soundCues;\n    } else {\n        if (!SoundCues || !SoundCues.value) {\n            throw Error(\"Sound cue replicant not available.\")\n        }\n        cues = SoundCues.value;\n    }\n\n    const cueOptions = cues.reduce((prev, curr) => {\n        prev.push({\n            label: curr,\n            value: curr,\n            selected: defaultValue === curr,\n        })\n        return prev;\n    }, [{\n        label: \"Select one\",\n        value: \"-1\",\n        selected: defaultValue ? false : true\n    }] as SelectInputDataElem[])\n\n    return cueOptions;\n}\n\nfunction getCueOptionsList(mappedCues: SoundCueNameList) {\n    if (!SoundCues || !SoundCues.value) {\n        throw Error(\"Sound cue replicant not available.\")\n    }\n    const cues = SoundCues.value;\n    const cueOptionLists = mappedCues.map((c) => getCueOptions(c, cues)); \n    \n    return cueOptionLists;\n}\n\nconst CommandFormState : ConfigFormState = {\n    editingRows: [],\n    submittingRows: [],\n    rowErrors: {},\n    rendered: false,\n    commandTypeOptions: [],\n}\n\n/**\n * Mouse click event for the enable/disable button.\n * Apply changes to config instantly.\n * @param e button click event\n */\nfunction onEnableButtonClicked(e: MouseEvent) {\n    e.preventDefault();\n    if (!CommandConfig || !CommandConfig.value) {\n        console.error(\"Failed enabling/disabling sound alert - replicant not available.\");\n        return;\n    }\n    if (!e.target) {\n        console.error(\"Failed enabling/disabling sound alert - no event target found.\")\n        return;\n    }\n    const target = e.target as HTMLButtonElement;\n    if (!target.dataset.cmdName) {\n        console.error(\"Failed enabling/disabling sound alert - command name found.\")\n        return;\n    }\n\n    const cmdName = target.dataset.cmdName;\n    const foundCommand = CommandConfig.value.find((c) => c.commandName === cmdName);\n    if (!foundCommand) {\n        console.error(`Failed enabling/disabling sound alert - command matching \"${cmdName}\" not found.`)\n        return;\n    }\n    \n    // check the target's dataset prop.\n    const enabled = (target.dataset.enabled === \"true\");    \n    \n    // this will trigger a re-render\n    foundCommand.enabled = !enabled;\n}\n\n\nfunction removeValueElem(fg: HTMLDivElement) {\n    const selector = \".fieldValue\";\n    const fvs = fg.querySelectorAll(selector);\n    if (fvs && fvs.length > 0) {\n        for (let v = 0; v < fvs.length; v++) {\n            const fieldToRemove = fvs[v];\n            fg.removeChild(fieldToRemove);\n        }\n    }\n}\n\n\n\n\n\nfunction onEditCancelClick(event: MouseEvent) {\n    event.preventDefault();\n\n    if (!event.target) {\n        console.error(\"Failed sound alert edit - no event target found.\");\n        return;\n    }\n    const target = event.target as HTMLButtonElement;\n    const form = target.closest(\"form\") as HTMLFormElement;\n    if (!form) {\n        console.error(\"Failed sound alert edit - unable to locate form.\");\n        return;\n    }\n\n    const id = form.dataset.id ? parseInt(form.dataset.id) : -1;\n    if (id < 0) {\n        console.error(\"Failed sound alert edit - no ID found.\");\n        return;\n    }\n\n    const formGroups = form.querySelectorAll(\"div.formGroup\");\n    if (formGroups.length <= 0) {\n        console.error(\"Failed sound alert edit - unable to locate form groups.\");\n        return;\n    }\n\n    const foundCommand = getCommandConfigById(id);\n    const fieldValueClass = ['fieldValue'];\n\n    for (let x = 0; x < formGroups.length; x++) {\n        const fg = formGroups[x] as HTMLDivElement;\n        switch (fg.dataset.fieldName) {\n            case 'name':\n                const nameInput = HtmlHelpers.buildSpan(foundCommand.commandName, fieldValueClass);\n                removeValueElem(fg);\n                fg.appendChild(nameInput);\n                break;\n            case 'cooldown':\n                const cooldownVal = foundCommand.coolDownMs ? foundCommand.coolDownMs.toString() : \"0\";\n                const cooldownInput = HtmlHelpers.buildSpan(cooldownVal, fieldValueClass);\n                removeValueElem(fg);\n                fg.appendChild(cooldownInput);\n                break;\n            case 'type':\n                const typeInput = HtmlHelpers.buildSpan(foundCommand.commandType, fieldValueClass);\n                removeValueElem(fg);\n                fg.appendChild(typeInput);\n                break;\n            case 'cues':\n                const cueElem = HtmlHelpers.buildSpan(foundCommand.mappedCues.join((', ')), fieldValueClass);\n                removeValueElem(fg);\n                fg.append(cueElem);\n                break;\n            case 'edit':\n                const editButton = HtmlHelpers.buildButton(\"btnEdit\",\"Edit\", []);\n                editButton.onclick = onEditButtonClick;\n                fg.replaceChildren(editButton);\n                break;\n            default:\n                break;\n        }\n    }\n\n    form.dataset.editing = 'false';\n}\n\n\nfunction onEditButtonClick(event: MouseEvent) {\n    event.preventDefault();\n\n    if (!event.target) {\n        console.error(\"Failed sound alert edit - no event target found.\");\n        return;\n    }\n\n    const target = event.target as HTMLButtonElement;\n    const form = target.closest(\"form\") as HTMLFormElement;\n    if (!form) {\n        console.error(\"Failed sound alert edit - unable to locate form.\");\n        return;\n    }\n    form.dataset.editing = 'true';\n\n    const id = form.dataset.id ? parseInt(form.dataset.id) : -1;\n    if (id < 0) {\n        console.error(\"Failed sound alert edit - no ID found.\");\n        return;\n    }\n\n    const formGroups = form.querySelectorAll(\"div.formGroup\");\n    if (formGroups.length <= 0) {\n        console.error(\"Failed sound alert edit - unable to locate form groups.\");\n        return;\n    }\n\n    const foundCommand = getCommandConfigById(id);\n    const fieldValueClass = ['fieldValue'];\n\n    for (let x = 0; x < formGroups.length; x++) {\n        const fg = formGroups[x] as HTMLDivElement;\n        switch (fg.dataset.fieldName) {\n            case 'name':\n                const nameInput = HtmlHelpers.buildTextInput(\"commandName\", foundCommand.commandName, fieldValueClass);\n                removeValueElem(fg);\n                fg.appendChild(nameInput);\n                break;\n            case 'cooldown':\n                const cooldownVal = foundCommand.coolDownMs ? foundCommand.coolDownMs.toString() : \"0\";\n                const cooldownInput = HtmlHelpers.buildNumberInput(\"cooldownMs\", cooldownVal, fieldValueClass);\n                removeValueElem(fg);\n                fg.appendChild(cooldownInput);\n                break;\n            case 'type':\n                const typeOptions = getTypeOptions(foundCommand.commandType);\n                const typeInput = HtmlHelpers.buildSelect(fieldValueClass, \"commandType\", typeOptions);\n                removeValueElem(fg);\n                fg.appendChild(typeInput);\n                break;\n            case 'cues':\n                const cueLists = getCueOptionsList(foundCommand.mappedCues);\n                const cueElems = cueLists.map((c) => {\n                    return HtmlHelpers.buildSelect(fieldValueClass, \"mappedCues\", c);\n                });\n                removeValueElem(fg);\n                fg.append(...cueElems);\n                break;\n            case 'edit':\n                const saveButton = HtmlHelpers.buildButton(\"btnSave\", \"Save\", [ CSSClasses.btnAdd, ]);\n                const cancelButton = HtmlHelpers.buildButton(\"btnCancel\", \"Cancel\", []);\n                cancelButton.onclick = onEditCancelClick;\n                const deleteButton = HtmlHelpers.buildButton(\"btnDelete\", \"Delete\", [ CSSClasses.btnRemove ]);\n                fg.replaceChildren(saveButton, cancelButton, deleteButton);\n                break;\n            default:\n                break;\n        }\n    }\n}\n\nfunction buildEnableButton(enabled: boolean, commandName: string) {\n    let txt = enabled ? 'On' : \"Off\";\n    const btn = HtmlHelpers.buildButton(\"btnEnabled\", txt, [CSSClasses.btnToggleEnabled]);\n    if (enabled) {\n        btn.classList.add(CSSClasses.enabled);\n    }\n    btn.onclick = onEnableButtonClicked;\n    btn.dataset.cmdName = commandName;\n    btn.dataset.enabled = enabled.toString();\n    return btn;\n}\n\nfunction buildFormGroup(extraClasses?: CSSClasses[]) {\n    let classes = [ CSSClasses.formGroup, ]\n    if (extraClasses) {\n        classes = classes.concat(extraClasses)\n    }\n    const elem = HtmlHelpers.buildDiv(undefined, classes);\n    return elem;\n}\n\nfunction btnRemoveClick(e: MouseEvent) {\n    e.preventDefault();\n    if (!CommandConfig || !CommandConfig.value) {\n        console.error(\"Failed removing command - replicant not available.\");\n        return;\n    }\n    if (!e.target) {\n        console.error(\"Failed removing command - no event target found.\")\n        return;\n    }\n    const target = e.target as HTMLButtonElement;\n    if (!target.dataset.cmdName) {\n        console.error(\"Failed removing command - command name found.\")\n        return;\n    }\n}\n\nfunction buildReadonlyFormGroup(fieldName: string, labelName: string, label: string, text: string) {\n    const fg = buildFormGroup();\n    fg.dataset.fieldName = fieldName;\n    let labelElem = HtmlHelpers.buildLabel(labelName, label);\n    const spanElem = HtmlHelpers.buildSpan(text, ['fieldValue']);\n    fg.append(labelElem, spanElem);\n    return fg;\n}\n\n\nfunction mapCommandToForm(cmd: SoundCommand, index: number) { \n    if (!CommandTypes || !CommandTypes.value) {\n        throw Error(\"Unable to map command rows - no command types are loaded.\");\n    }\n\n    if (!SoundCues || !SoundCues.value) {\n        throw Error(\"Unable to map command rows - no sound cues are loaded.\");\n    }\n\n    console.log(JSON.stringify(cmd));\n\n    const rowDiv = HtmlHelpers.buildForm(`commandForm-${cmd.id}`, null, []);\n    rowDiv.dataset.id = cmd.id.toString();\n    rowDiv.dataset.commandName = cmd.commandName;    \n    rowDiv.dataset.index = index.toString();\n    rowDiv.dataset.editing = 'false';\n\n    const newFormRow = HtmlHelpers.buildDiv(`cmd-row-${cmd.commandName}`, [ CSSClasses.commandFormRow, ]);\n\n    // enable/disable button\n    let fg = buildFormGroup([CSSClasses.middle]);\n    let btn = buildEnableButton(cmd.enabled, cmd.commandName);\n    fg.appendChild(btn);\n    newFormRow.appendChild(fg)\n\n    fg = buildFormGroup([CSSClasses.middle]);\n    let span = HtmlHelpers.buildSpan(cmd.id.toString());\n    fg.appendChild(span);\n    newFormRow.appendChild(fg);\n\n    // command name field\n    fg = buildReadonlyFormGroup(\"name\", \"commandName\", \"Name\", cmd.commandName);\n    newFormRow.appendChild(fg);\n\n    // cooldown field\n    let txt = cmd.coolDownMs ? `${cmd.coolDownMs} ms` : \"None\";\n    fg = buildReadonlyFormGroup(\"cooldown\", \"coolDownMs\", \"Cooldown\", txt);\n    newFormRow.appendChild(fg);\n\n    // command type field\n    fg = buildReadonlyFormGroup(\"type\", \"commandType\", \"Type\", cmd.commandType);\n    newFormRow.appendChild(fg)\n\n    // mapped cues\n    const cueTxt = cmd.mappedCues.length <= 0 ? \"None\" : cmd.mappedCues.join(\", \");\n    fg = buildReadonlyFormGroup(\"cues\", \"mappedCues\", \"Cues\", cueTxt);\n    newFormRow.appendChild(fg)\n\n    // edit button\n    fg = buildFormGroup([CSSClasses.middle]);\n    fg.dataset.fieldName = \"edit\";\n    btn = HtmlHelpers.buildButton(\"\",\"Edit\", []);\n    btn.onclick = onEditButtonClick;\n    fg.appendChild(btn);\n    newFormRow.appendChild(fg);\n\n    // add the row to the form\n    rowDiv.appendChild(newFormRow);\n    return rowDiv;\n}\n\nfunction initializeSoundCueForms(config : SoundCommandList) {\n    const mapPanel = document.getElementById(ElementIDs.cueConfigPanel);\n    if (!mapPanel) {\n        console.error(\"Unable to locate panel, skipping form initialization.\")\n        return;\n    }\n    const rows = config.map(mapCommandToForm);\n    mapPanel.append(...rows);\n}\n\nfunction updateSoundCueForms(newConfig : SoundCommandList, oldConfig: SoundCommandList) {\n    const mapPanel = document.getElementById(ElementIDs.cueConfigPanel);\n    if (!mapPanel) {\n        console.error(\"Unable to locate panel, skipping form update.\")\n        return;\n    }\n}\n\nfunction teardownSoundCueForms() {\n    const mapPanel = document.getElementById(ElementIDs.cueConfigPanel);\n    if (!mapPanel) {\n        console.error(\"Unable to locate panel, skipping form teardown.\")\n        return;\n    }\n}\n\nfunction onSoundCommandConfigChange(newConfig: SoundCommandList, oldConfig: SoundCommandList) {\n    if (!Array.isArray(newConfig))  {\n        console.error(\"No config was provided, skipping form render.\")\n        return;\n    }\n\n    if (newConfig && !oldConfig) {\n        // create from scratch\n        initializeSoundCueForms(newConfig);\n    } else if (newConfig && oldConfig) {\n        // update the dom\n        updateSoundCueForms(newConfig, oldConfig);\n    } else if (!newConfig && oldConfig) {\n        // tear down the forms\n        teardownSoundCueForms();\n    }\n};\n\n\nfunction setupSoundCueConfigForm(){\n    NodeCG.waitForReplicants(CommandConfig, CommandTypes, SoundCues)\n    .then(() => {\n        CommandConfig.on(ReplicantEvents.change, onSoundCommandConfigChange);\n    });\n}\n\ndocument.addEventListener(\"DOMContentLoaded\", setupSoundCueConfigForm);"],"names":["$c9667c13806cac9b$export$2e2bcd8739ae039","name","text","classes","button","document","createElement","length","classList","add","innerText","forName","label","htmlFor","value","input","type","options","select","forEach","opt","o","selected","span","id","div","form","$9f616eee726af400$export$501f6df0ab3ca018","SoundAlertReplicants","$ad119dc852be40ec$var$ReplicantEvents","$ad119dc852be40ec$export$2e2bcd8739ae039","$14bce57df13bef4b$export$1112fe37bc980be0","CSSClasses","$14bce57df13bef4b$export$d0ba48f9ed05b63c","$8fd10160d14e935e$var$CommandConfig","nodecg","Replicant","soundCueConfig","$8fd10160d14e935e$var$CommandTypes","soundCueTypes","$8fd10160d14e935e$var$SoundCues","soundCueList","$8fd10160d14e935e$var$getCommandConfigById","Error","foundCommand","find","c","$8fd10160d14e935e$var$getTypeOptions","defaultValue","reduce","prev","curr","push","$8fd10160d14e935e$var$getCueOptionsList","mappedCues","cues","cueOptionLists","map","soundCues","$8fd10160d14e935e$var$getCueOptions","$8fd10160d14e935e$var$onEnableButtonClicked","e","preventDefault","console","error","target","dataset","cmdName","commandName","enabled","$8fd10160d14e935e$var$removeValueElem","fg","fvs","querySelectorAll","v","fieldToRemove","removeChild","$8fd10160d14e935e$var$onEditCancelClick","event","closest","parseInt","formGroups","fieldValueClass","x","fieldName","nameInput","buildSpan","appendChild","cooldownVal","coolDownMs","toString","cooldownInput","typeInput","commandType","cueElem","join","append","editButton","buildButton","onclick","$8fd10160d14e935e$var$onEditButtonClick","replaceChildren","editing","buildTextInput","buildNumberInput","typeOptions","buildSelect","cueElems","saveButton","btnAdd","cancelButton","deleteButton","btnRemove","$8fd10160d14e935e$var$buildFormGroup","extraClasses","formGroup","concat","buildDiv","undefined","$8fd10160d14e935e$var$buildReadonlyFormGroup","labelName","labelElem","buildLabel","spanElem","$8fd10160d14e935e$var$mapCommandToForm","cmd","index","log","JSON","stringify","rowDiv","buildForm","newFormRow","commandFormRow","middle","btn","txt","btnToggleEnabled","$8fd10160d14e935e$var$buildEnableButton","$8fd10160d14e935e$var$onSoundCommandConfigChange","newConfig","oldConfig","Array","isArray","config","mapPanel","getElementById","cueConfigPanel","rows","$8fd10160d14e935e$var$initializeSoundCueForms","addEventListener","NodeCG","waitForReplicants","then","on","change"],"version":3,"file":"index.d000ec4b.js.map"}